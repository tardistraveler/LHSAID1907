1，C
2，B
3，A
4，B
5，A


二：对，错，错，错，错，错，对，错，对，对

三：
1，  列表里的内容是可以改变的，增删改都可以，tuple则不行；
python中字典的key必须是可哈希的，不可变的所以tuple可以作为字典的键，而list不行；
对于使用场景tuple适合一些只读的数据，如python链接mysql得到的结果就是用tuple，而list则在列表长度不固定或者需要有变动的数据中使用
	tuple的性能比list好一些，tuple比list更省内存

2，break 语句的作用:
	1.	跳出循环体，后面的代码不再执行。
	2.	可以让while语句的else部分不执行。
   continue 语句的作用: 跳过本次，继续下次循环。


3，答：
  赋值（=），就是创建了对象的一个新的引用，修改其中任意一个变量都会 影响到另一个。 
  浅拷贝：创建一个新的对象，但它包含的是对原始对象中包含项的引用
	   （如果用 引用的方式修改其中一个对象，另外一个也会修改改变）
	    {1,完全切片方法；2， 工厂函数，如 list()；3，copy 模块的 copy()函数} 
  深拷贝：创建一个新的对象，并且递归的复制它所包含的对象（修改其中一个， 另外一个不会改变）
		 {copy 模块的 deep.deepcopy()函数}

4，lambda 表达式（又称匿名函数）
作用：创建一个匿名函数对象,同def类似，但不提供函数名
语法说明：
        1. lambda 只是一个表达式 ,它用来创建一个函数对象
        2. 当lambda表达式执行时，返回的是冒号(:)后 的表达式的值
        3. lambda表达式创建的函数只能包含一条语句
		4. lambda比函数简单，且可以随时创建和销毁，有利于减少程序的偶合度
   #好处：1.没有名字节约命名空间
          2.变量创建后就被使用、销毁，不占用内存(写自己理解的就好)



5，：Python是一种解释型语言。这就是说，与C语言和C的衍生语言不同，Python代码在运行之前不需要编译。其他解释型语言还包括PHP和Ruby。
Python是动态类型语言，指的是你在声明变量时，不需要说明变量的类型。你可以直接编写类似x=111和x="I'm a string"这样的代码，程序不会报错。
Python非常适合面向对象的编程（OOP），因为它支持通过组合（composition）与继承（inheritance）的方式定义类（class）。Python中没有访问说明符（access specifier，类似C++中的public和private），这么设计的依据是“大家都是成年人了”。
在Python语言中，函数是第一类对象（first-class objects）。这指的是它们可以被指定给变量，函数既能返回函数类型，也可以接受函数作为输入。类（class）也是第一类对象。
Python代码编写快，但是运行速度比编译语言通常要慢。好在Python允许加入基于C语言编写的扩展，因此我们能够优化代码，消除瓶颈，这点通常是可以实现的。numpy就是一个很好地例子，它的运行速度真的非常快，因为很多算术运算其实并不是通过Python实现的。
Python用途非常广泛――网络应用，自动化，科学建模，大数据应用，等等。它也常被用作“胶水语言”，帮助其他语言和组件改善运行状况。
Python让困难的事情变得容易，因此程序员可以专注于算法和数据结构的设计，而不用处理底层的细节。

四：
1，A0：{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
	A1：range（0， 10）
	A2：[ ]
	A3：[ 1,2,3,4,5 ]
	A4：[ 1,2,3,4,5 ]
	A5：{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}
	A6：[[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81]]

2，[“a”,”b”,”c”]

3，答:
	[0, 2, 4]
	[3, 2, 1, 0, 2, 4]
	[0, 2, 4, 0, 2]

4，答：
     2


五：
1，闭包可以实现先将一个参数传递给一个函数，而并不立即执行，以达到延迟求值的目的。满足以下三个条件：必须有一个内嵌函数；内嵌函数必须引用外部函数中变量；外部函数返回值必须是内嵌函数。
def delay_fun(x, y):
    def caculator():
        return x+y
    return caculator

print('返回一个求和的函数，并不求和')
msum = delay_fun(3,4)
print('调用并求和:')
print(msum())



2，
A = [1,2,[3,4,['434',[5,['535'],6]]]]
def printiter(lst):
    for x in lst:
        if type(x) == list:
            printiter(x)
        else:
            print(x,end=' ')
printiter(A)


3，
mylist = ['D', 'G', 'H','D', 'G', 'H','D', 'G']  
myset = set(mylist)  #myset是另外一个列表，里面的内容是mylist里面的无重复项  
for item in myset:  
	print("the %s has found %d" %(item,mylist.count(item)))  
times = mylist.count('D')  
print(list(myset))  
